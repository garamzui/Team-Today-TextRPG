using System;
using System.Threading;

enum DUNGEON_DIFF
{
    Easy,
    Normal,
    Hard,
    Hell
}

class Dungeon
{
    private Random rand = new Random();
    private int code;
    private string name;
    private int reward;
    private int exp;
    private int defLevel;
    private DUNGEON_DIFF diff;

    private bool isInHellDungeon = false;

    public Dungeon(string[] info)
    {
        if (info.Length >= 6)
        {
            code = int.Parse(info[0]);
            name = info[1];
            reward = int.Parse(info[2]);
            exp = int.Parse(info[3]);
            defLevel = int.Parse(info[4]);
            diff = (DUNGEON_DIFF)Enum.Parse(typeof(DUNGEON_DIFF), info[5]);
        }
    }

    public void EnterDungeon(Player player, Func<int, Monster> getMonster)
    {
        Console.WriteLine($"\n[{name}] ÎçòÏ†ÑÏóê ÏûÖÏû•ÌñàÏäµÎãàÎã§!");

        if (diff == DUNGEON_DIFF.Hell)
        {
            isInHellDungeon = true;
            new Thread(() => HellDamageOverTime(player)).Start();
        }

        int currentFloor = 1;
        int maxFloor = 5;

        while (currentFloor <= maxFloor && player.Hp > 0)
        {
            Console.WriteLine($"\nÌòÑÏû¨ {currentFloor}Ï∏µÏûÖÎãàÎã§.");

            // Ïô∏Î∂ÄÏóêÏÑú Î™¨Ïä§ÌÑ∞Î•º Î∞õÏïÑÏò¥
            Monster monster = getMonster(currentFloor);

            Console.WriteLine($"\n{monster.Name}Ïù¥(Í∞Ä) Îì±Ïû•ÌñàÏäµÎãàÎã§! {(monster.IsBoss ? "[Î≥¥Ïä§ Î™¨Ïä§ÌÑ∞]" : "")}");

            int originalAttack = player.BaseAttack;
            int originalDefense = player.BaseDefense;

            if (monster.IsBoss)
            {
                Console.WriteLine("\n[Î≥¥Ïä§ Ìö®Í≥º] ÌîåÎ†àÏù¥Ïñ¥Ïùò Îä•Î†•ÏπòÍ∞Ä 10% Í∞êÏÜåÌï©ÎãàÎã§!");
                player.BaseAttack = (int)(player.BaseAttack * 0.9);
                player.BaseDefense = (int)(player.BaseDefense * 0.9);
            }

            bool fled = false;
            while (monster.Hp > 0 && player.Hp > 0)
            {
                Console.WriteLine("\n1. Í≥µÍ≤©ÌïòÍ∏∞");
                Console.WriteLine("2. ÎèÑÎßùÍ∞ÄÍ∏∞");
                Console.Write("\n>> ");
                string input = Console.ReadLine();

                if (input == "1")
                {
                    monster.Hp -= player.TotalAttack;
                    Console.WriteLine($"{monster.Name}ÏóêÍ≤å {player.TotalAttack} Îç∞ÎØ∏ÏßÄÎ•º ÏûÖÌòîÏäµÎãàÎã§.");

                    if (monster.Hp <= 0)
                    {
                        Console.WriteLine("\nÎ™¨Ïä§ÌÑ∞Î•º Ï≤òÏπòÌñàÏäµÎãàÎã§!");
                        player.Gold += monster.Reward;
                        Console.WriteLine($"Î≥¥ÏÉÅÏúºÎ°ú {monster.Reward}GÎ•º ÏñªÏóàÏäµÎãàÎã§!");

                        if (monster.IsBoss && monster.Name == "Zakum")
                        {
                            player.Title = "Zakum Slayer";
                            Console.WriteLine("\n[Ïπ≠Ìò∏ ÌöçÎìù] 'Zakum Slayer' Ïπ≠Ìò∏Î•º ÏñªÏóàÏäµÎãàÎã§!");
                        }

                        break;
                    }

                    player.Hp -= monster.Attack;
                    Console.WriteLine($"{monster.Name}Ïùò Î∞òÍ≤©! {monster.Attack} Îç∞ÎØ∏ÏßÄ ÏûÖÏùå. (HP: {player.Hp}/{player.MaxHp})");

                    if (player.Hp <= 0)
                    {
                        Console.WriteLine("\nÌîåÎ†àÏù¥Ïñ¥Í∞Ä Ïì∞Îü¨Ï°åÏäµÎãàÎã§!");
                        break;
                    }
                }
                else if (input == "2")
                {
                    Console.WriteLine("\nÎèÑÎßùÏ≥§ÏäµÎãàÎã§!");
                    fled = true;
                    break;
                }
                else
                {
                    Console.WriteLine("ÏûòÎ™ªÎêú ÏûÖÎ†•ÏûÖÎãàÎã§.");
                }
            }

            if (monster.IsBoss)
            {
                player.BaseAttack = originalAttack;
                player.BaseDefense = originalDefense;
                Console.WriteLine("\n[Î≥¥Ïä§ Ìö®Í≥º Ï¢ÖÎ£å] ÌîåÎ†àÏù¥Ïñ¥ Îä•Î†•ÏπòÍ∞Ä Î≥µÍµ¨ÎêòÏóàÏäµÎãàÎã§.");
            }

            if (fled || player.Hp <= 0)
                break;

            currentFloor++;
        }

        if (player.Hp > 0 && currentFloor > maxFloor)
        {
            Console.WriteLine("\nüéâ ÎçòÏ†ÑÏùÑ Î™®Îëê ÌÅ¥Î¶¨Ïñ¥ÌñàÏäµÎãàÎã§! üéâ");
        }

        isInHellDungeon = false;
    }

    private void HellDamageOverTime(Player player)
    {
        while (isInHellDungeon && player.Hp > 0)
        {
            Thread.Sleep(2000);

            double damage = player.Hp * 0.001;
            int realDamage = Math.Max(1, (int)damage);

            player.Hp -= realDamage;
            if (player.Hp < 0) player.Hp = 0;

            Console.WriteLine($"\n[Ìó¨ ÎçòÏ†Ñ Ìö®Í≥º] ÏßÄÏÜç Îç∞ÎØ∏ÏßÄ Î∞úÏÉù! {realDamage} Îç∞ÎØ∏ÏßÄ ÏûÖÏùå (ÌòÑÏû¨ Ï≤¥Î†•: {player.Hp})");

            if (player.Hp <= 0)
            {
                Console.WriteLine("\n[Ìó¨ ÎçòÏ†Ñ Ìö®Í≥º] Ï≤¥Î†•Ïù¥ 0Ïù¥ ÎêòÏñ¥ ÏÇ¨ÎßùÌñàÏäµÎãàÎã§!");
                break;
            }
        }
    }

    public bool CheckClear(int playerLevel)
    {
        return playerLevel >= defLevel;
    }

    public int CalcReward(int playerLevel)
    {
        int bonus = 0;
        if (playerLevel > defLevel + 2)
        {
            bonus = rand.Next(50, 101);
        }
        return reward + bonus;
    }

    public int CalcMinusHP(int playerDefense)
    {
        int baseDamage = 10;

        switch (diff)
        {
            case DUNGEON_DIFF.Easy:
                baseDamage = 10;
                break;
            case DUNGEON_DIFF.Normal:
                baseDamage = 20;
                break;
            case DUNGEON_DIFF.Hard:
                baseDamage = 30;
                break;
            case DUNGEON_DIFF.Hell:
                baseDamage = 50;
                break;
        }

        int finalDamage = baseDamage - playerDefense;
        if (finalDamage < 1) finalDamage = 1;

        return finalDamage;
    }

    public void PrintDungeonInfo()
    {
        Console.WriteLine($"[{code}] {name} - {diff} ÎÇúÏù¥ÎèÑ");
        Console.WriteLine($"Ï∂îÏ≤ú Î†àÎ≤®: {defLevel} / Í∏∞Î≥∏ Î≥¥ÏÉÅ: {reward}G / Í≤ΩÌóòÏπò: {exp}Exp");
    }
}
„Öç
